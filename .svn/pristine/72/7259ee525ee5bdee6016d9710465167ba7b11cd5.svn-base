package com.htkfood.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.htkfood.entity.ExpressEntity;
import com.htkfood.entity.LogisticsEntity;
import com.htkfood.entity.UserEntity;
import com.htkfood.entity.vo.ExpressVo;
import com.htkfood.exception.CommonException;
import com.htkfood.exception.CommonExceptionHelper;
import com.htkfood.mapper.Criteria;
import com.htkfood.mapper.master.ExpressMapper;
import com.htkfood.service.ExpressService;
import com.htkfood.service.LogisticsService;
import com.htkfood.service.SmsService;

@Service
public class ExpressServiceImpl implements ExpressService {
	private Logger logger=LoggerFactory.getLogger(ExpressServiceImpl.class);
	@Autowired
	private ExpressMapper expressMapper;
	@Autowired
	private LogisticsService logisticsService;
	@Autowired
	private SmsService smsService;
	@Override
	@Transactional(rollbackFor = {CommonException.class, RuntimeException.class, Error.class})
	public String addExpress(UserEntity user,ExpressVo expressVo) throws CommonException {
		String logisticsNo=expressVo.getLogisticsNo();
		LogisticsEntity logisticsEntity=logisticsService.getLogisticsByNo(user, logisticsNo);
		List<ExpressEntity> list=expressVo.getExpressEntities();
		ExpressEntity entity=null;
		if(list==null) {
			throw CommonExceptionHelper.commonException("出库单信息不能为空", null);
		}
		if(logisticsEntity.getLogisticsStatus()>=3) {
			throw CommonExceptionHelper.commonException("该物流已装货完成，不能重装", null);
		}
		if(logisticsEntity.getLogisticsStatus()<2) {
			throw CommonExceptionHelper.commonException("该物流还未到厂，不能装货", null);
		}
		Long logisticsId=logisticsEntity.getId();
		for(int i=0;i<list.size();i++) {
			entity=list.get(i);
			//插入的时候先查询有没有重复的出库单号
			if(querydeliveryOrder(entity.getDeliveryOrder())!=null) {
				logger.error(String.format("出库单号[%s]已经入库，无法添加", entity.getDeliveryOrder()));
				throw CommonExceptionHelper.commonException("出库单号:"+entity.getDeliveryOrder()+"已装货出库！", null);
			}
			entity.setReceiverPhone(entity.getReceiverPhone().trim());
			entity.setEmployeePhone(entity.getEmployeePhone().trim());
			entity.setLogisticsId(logisticsId);
			entity.setCreateTime(System.currentTimeMillis()/1000);
			entity.setUpdateTime(System.currentTimeMillis()/1000);
			entity.setStatus(0);
			entity.setToken(com.htkfood.util.StringUtil.simpleUUID().substring(0, 6));
			expressMapper.insertByEntity(entity);
		}
		//更改物流状态
		logisticsService.updateStatus(logisticsId, 3,null);
		StringBuilder sBuilder=new StringBuilder();
		List<ExpressEntity>employeeEntity=new ArrayList<ExpressEntity>();
		List<String>employeeNames=new ArrayList<String>();
		//发送短信
		for(int i=0;i<list.size();i++) {
			entity=querydeliveryOrder(list.get(i).getDeliveryOrder());
			if(!employeeNames.contains(entity.getEmployeeName())) {
				employeeNames.add(entity.getEmployeeName());
				employeeEntity.add(entity);
			}
			String smsResult=smsService.sendSms2Client(logisticsEntity, entity);
			if(smsResult.equals("-10006")) {
				
			}else if(smsResult.equals("OK")) {
				
			}else {
				sBuilder.append(String.format("给客户 %s 手机号 %s 发送短信失败\r\n",entity.getClient(),entity.getReceiverPhone()));
			}
		}
		//业务员
		for(int i=0;i<employeeEntity.size();i++) {
			entity=list.get(i);
			String smsResult=smsService.sendSms2Employee(logisticsEntity, entity);
			if(smsResult.equals("-10006")) {
				
			}else if(smsResult.equals("OK")) {
				
			}else {
				sBuilder.append(String.format("给业务员 %s 手机号 %s 发送短信失败\r\n",entity.getEmployeeName(),entity.getEmployeePhone()));
			}
			
		}
		logger.info(String.format("给业务员和客户发送短信信息[%s]",sBuilder.toString()));
		return sBuilder.toString();
	}
	@Override
	public void queryLogistics(UserEntity user, Long expressId, String t, Map<String, Object> result)
			throws CommonException {
		ExpressEntity entity =queryExpressById(expressId);
		LogisticsEntity logisticsEntity=logisticsService.getLogisticsById(user, entity.getLogisticsId());
		if(t!=null&&entity.getToken().equals(t)) {
			result.put("logistics", logisticsEntity);
			result.put("express", entity);
		}else {
			throw CommonExceptionHelper.commonException("物流信息不存在", null);
		}
	}
	@Override
	public ExpressEntity queryExpressById(Long expressId) throws CommonException {
		Criteria criteria =new Criteria();
		criteria.put("id", expressId);
		List<ExpressEntity>list=expressMapper.getExpress(criteria );
		if(list==null||list.isEmpty())
			throw CommonExceptionHelper.commonException("出库信息不存在", null);
		return list.get(0);
	}
	private ExpressEntity querydeliveryOrder(String deliveryOrder) throws CommonException {
		Criteria criteria =new Criteria();
		criteria.put("deliveryOrder", deliveryOrder);
		List<ExpressEntity>list=expressMapper.getExpress(criteria );
		if(list==null||list.isEmpty())
			return null;
		return list.get(0);
	}
	
	@Override
	public void updateByEntity(ExpressEntity entity) throws CommonException {
		if(entity!=null) {
			expressMapper.updateByEntity(entity);
		}else {
			throw  CommonExceptionHelper.commonException("出库信息出错！", null);
		}
		
	}
	@Override
	public void queryStatus(UserEntity user, Long expressId, String t, Map<String, Object> result)
			throws CommonException {
		ExpressEntity entity =queryExpressById(expressId);
		if(t!=null&&entity.getToken().equals(t)) {
			result.put("status", entity.getStatus());	
		}else {
			throw CommonExceptionHelper.commonException("物流信息不存在", null);
		}
		
	}
	@Override
	public void queryLogistics4App(Long expressId, Map<String, Object> result) throws CommonException {
		ExpressEntity entity =queryExpressById(expressId);
		LogisticsEntity logisticsEntity=logisticsService.getLogisticsById(null, entity.getLogisticsId());
		result.put("logistics", logisticsEntity);
		result.put("express", entity);
	}

}
